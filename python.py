# -*- coding: utf-8 -*-
"""python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JauEzTZKywL5V4LVrVGc-izW_6mlrq8L
"""

import json

x = {
   
  "Devices": [{
			"Name": "Temperature-device",
			"Type": "Modbus",
			"Info": "A Modbus device uuid:c92788ea-e57c-11ec-8fea-0242ac120002, used to read the temperature",
			"Sensors": [{
					"Name": "Sensor One",
					"Payload": 5
				},
				{
					"Name": "Sensor Two",
					"Payload": 5
				}
			]
		},
		{
			"Name": "Pressure-device",
			"Type": "Modbus",
			"Info": "A Modbus device uuid:22919442-e583-11ec-8fea-0242ac120002, used to read the pressure",
			"Sensors": [{
					"Name": "Sensor One",
					"Payload": 66
				},
				{
					"Name": "Sensor Two",
					"Payload": 9
				}
			]
		},
		{
			"Name": "Light-level-device",
			"Type": "Bacnet",
			"Info": "A Bacnet device uuid:29446300-e583-11ec-8fea-0242ac120002, used to read the light-level",
			"Sensors": [{
					"Name": "Sensor One",
					"Payload": 2
				},
				{
					"Name": "Sensor Two",
					"Payload": 32
				}
			]
		},
		{
			"Name": "accelerometer-device",
			"Type": "OPC-UA",
			"Info": "An OPC-UA device uuid:2d9596e0-e583-11ec-8fea-0242ac120002, used to read an accelerometer",
			"Sensors": [{
					"Name": "Sensor One",
					"Payload": 2
				},
				{
					"Name": "Sensor Two",
					"Payload": 32
				}
			]
		},
		{
			"Name": "Accelerometer-device",
			"Type": "OPC-UA",
			"Info": "An OPC-UA device uuid:31bd12a2-e583-11ec-8fea-0242ac120002, used to read an accelerometer",
			"Sensors": [{
					"Name": "Sensor One",
					"Payload": 7
				},
				{
					"Name": "Sensor Two",
					"Payload": 87
				}
			]
		}
	]
}
#parse the data

print("Parse the data in `exercise-01/data/devices.json`")
s1 = json.dumps(x)
data = json.loads(s1)
data_no_change = json.loads(s1)
print(s1[5])


list_of_lists = []
list_of_lists.append(x)
print(list_of_lists)
print(type(list_of_lists))
#data_no_change_list = json.load(x)
print(data)
print(type(data))
print(s1)
print(type(s1))

#y = ''.join(x) # converting list into string
#z = int(float(y))
#print(z)
#picking one of the keys
for devices in data['Devices']:
  print(devices['Sensors'])

#extract the info field
for info in data['Devices']:
  del info['Info']

#for info in data['Devices']['Info']:
#  uuid = info['Info']['uuid']
#  print(uuid)
  

print('')
print("Extract the `uuid` from the `Info` field")
for info in data_no_change['Devices']:
  print(info['Type'], info['Info'])

#For each device, calculate sum of the sensor payloads
print('')
print("Sum of sensor payload")
for payload in data_no_change['Devices']:
  print(payload)
  
print(len(data['Devices']))

#id = x[1]['Devices']
#print(id)

#for l in list_of_lists:
#    print(l['Devices']['Info'])


#for item in list_of_lists['Devices']['Sensors']:
#  print(item)


#Reformat the data so that it satisfies the schema in `exercise-01/output-schema/schema.json`
format_string = json.dumps(data_no_change, indent=2)
print('')
print("Reformatted data to match sechma.json")
print(format_string)

#Order the reformatted data by `Name` (ascending)
print('')
print("Names in alphabetical ascending order")
for name_list in data_no_change['Devices']:
        alphabetical = name_list['Name']
        print(name_list['Name'])


#Write the reformatted data to a new file in `JSON` format
print('')
print("reformatted data to a new file in `JSON` format")
with open('new_json.json', 'w') as f:
  for inform in x['Devices']:
    devices_shown = inform
    name_type = (inform['Name'], print("Name:"), print(type(inform)))
    format = (inform['Type'], print("Type:"),print(type(inform)))
    info_mat = (inform['Info'], print("Info:"),print(type(inform)))
    sensors = (inform['Sensors'], print("Sensors:"),print(type(inform)))
    json.dump("Name:",f)
    json.dump(name_type, f, indent = 2)
    json.dump("Type:",f)
    json.dump(format, f, indent = 2)
    json.dump("Info:",f)
    json.dump(info_mat, f, indent = 2)
    json.dump("Sensors:",f)
    json.dump(sensors, f, indent = 2)